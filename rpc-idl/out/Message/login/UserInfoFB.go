// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package login

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserInfoFB struct {
	_tab flatbuffers.Table
}

func GetRootAsUserInfoFB(buf []byte, offset flatbuffers.UOffsetT) *UserInfoFB {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserInfoFB{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *UserInfoFB) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserInfoFB) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserInfoFB) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserInfoFB) Age() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserInfoFB) MutateAge(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *UserInfoFB) Sex(j int) int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *UserInfoFB) SexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *UserInfoFB) MutateSex(j int, n int16) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt16(a+flatbuffers.UOffsetT(j*2), n)
	}
	return false
}

func (rcv *UserInfoFB) Widget(obj *WidgetFB, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *UserInfoFB) WidgetLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *UserInfoFB) Address(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *UserInfoFB) AddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func UserInfoFBStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func UserInfoFBAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func UserInfoFBAddAge(builder *flatbuffers.Builder, age int32) {
	builder.PrependInt32Slot(1, age, 0)
}
func UserInfoFBAddSex(builder *flatbuffers.Builder, sex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(sex), 0)
}
func UserInfoFBStartSexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func UserInfoFBAddWidget(builder *flatbuffers.Builder, widget flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(widget), 0)
}
func UserInfoFBStartWidgetVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UserInfoFBAddAddress(builder *flatbuffers.Builder, address flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(address), 0)
}
func UserInfoFBStartAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UserInfoFBEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
